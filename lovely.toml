[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local _area = G.P_CENTERS[joker].consumeable and G.consumeables or G.jokers'''
position = "after"
payload = '''
if G.P_CENTERS[joker].set == "Cine" then
    _area = G.cine_quests
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif G.consumeables then G.consumeables:emplace(card) end'''
position = "before"
payload = '''
elseif G.cine_quests and card.ability.set == "Cine" then
    G.cine_quests:emplace(card)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.playing_cards = {}'''
position = "before"
payload = '''
self.cine_quests = CardArea(0, 0, CAI.deck_W, CAI.deck_H, {
    card_limit = self.GAME.starting_params.cine_quest_slots,
    type = "joker",
    highlight_limit = 1
})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''not c.ending_shop and not c.reroll_shop and not c.selling_card and not c.selling_self and not c.buying_card and'''
position = "after"
payload = '''
not c.cine_progress and not c.joker_added and not c.enhancing_card
and not c.debuff_or_flipped_played and not c.any_card_destroyed and
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''for _, v in ipairs(info_queue) do'''
position = "after"
payload = '''
if v.key == "e_negative_consumable" and _c.set == "Cine" then
    v.key = "e_negative_cine"
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''tag_sprite.ability_UIBox_table = generate_card_ui(G.P_TAGS[self.key], nil, loc_vars, (self.hide_ability) and 'Undiscovered' or 'Tag', nil, (self.hide_ability))'''
position = "before"
payload = '''
if self.ability.as_card and name_to_check == "Skip Tag" then
    loc_vars[2] = self.config.skip_bonus * (G.GAME.skips or 0)
end
'''
match_indent = true

# Add fallback for Cine card
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _type == 'Tag' then _pool[#_pool + 1] = "tag_handy"'''
position = "after"
payload = '''
elseif _type == "Cine" then _pool[#_pool + 1] = "c_dvrprv_gem_heist"
elseif _type == "Cine_Quest" then _pool[#_pool + 1] = "c_dvrprv_gem_heist_quest"'''
match_indent = true

# Make the card uses Tags' sprite atlas
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.center = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[_center.set], self.config.center.pos)'''
position = "after"
payload = '''
elseif _center.set == "Tag" then
    self.children.center = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[_center.atlas or "tags"], self.config.center.pos)
'''
match_indent = true

# Disable buy space check for Tags
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''card.ability.set ~= 'Default' and'''
position = "before"
payload = '''
card.ability.set ~= "Tag" and
'''
match_indent = true

# Prevent Tags from being added to the deck
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''c1:add_to_deck()'''
position = "after"
payload = '''
::reverie_buy_from_shop_tag_skip::'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''c1:add_to_deck()'''
position = "before"
payload = '''
if c1.ability.set == "Tag" then
    goto reverie_buy_from_shop_tag_skip
end'''
match_indent = true

# Ensures that the second tag created by a Double Tag triggers because if the Mega Stamp Tag
# generates a Double Tag as its random tag and any immediate tag as its pack tag then the immediate
# tag gets duplicated but the second copy will only trigger after clearing a blind
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''add_tag(Tag(_context.tag.key))'''
position = "after"
payload = '''
for _, v in ipairs(G.GAME.tags) do
        v:apply_to_run({type = "immediate"})
end
'''
match_indent = true

# When Tags are purchased, properly add them to the game and remove from the shop
# Applying immediate tags is handled in injected update_shop()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''elseif e.config.id ~= 'buy_and_use' then'''
position = "before"
payload = '''
elseif c1.ability.set == "Tag" then
    add_tag(c1.ability.tag)
    c1:remove()

    play_sound("generic1", 0.9 + math.random() * 0.1, 0.8)
    play_sound("holo1", 1.2 + math.random() * 0.1, 0.4)
'''
match_indent = true

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>\s{20})elseif self.ability.name:find.'Buffoon'. then(\n.*?)*?\n\s{20}end'''
position = "after"
line_prepend = "$indent"
payload = '''

::reverie_skip_create_card::
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6)*'''
position = "before"
payload = '''
if Reverie.find_used_cine("Poker Face") then
    card = Reverie.create_poker_face_card(G.pack_cards)
    goto reverie_skip_create_card
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card = create_card("Joker", G.pack_cards, nil, nil, true, true, nil, 'buf')'''
position = "before"
payload = '''
card = Reverie.create_special_joker(G.pack_cards)

if card then
    goto reverie_skip_create_card
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.ref_table:redeem()'''
position = "after"
payload = '''
elseif card.ability.set == "Tag" then
    add_tag(card.ability.tag)
    card:remove()

    play_sound("generic1", 0.9 + math.random() * 0.1, 0.8)
    play_sound("holo1", 1.2 + math.random() * 0.1, 0.4)

    for _, v in ipairs(G.GAME.tags) do
        v:apply_to_run({type = "immediate"})
    end

    dont_dissolve = true
    delay_fac = 0.2'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''(self.ability.set == 'Spectral' and {G.C.SECONDARY_SET.Spectral}) or'''
position = "after"
payload = '''
(self.ability.set == 'Cine' and {G.C.SECONDARY_SET.Cine}) or'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Invisible Joker' and (self.config.center.discovered or self.bypass_discovery_center) then'''
position = "before"
payload = '''
if self.ability.set == "Cine" and (not self.edition or not self.edition.negative) then
    if self.ability.name == "The Unseen" and (self.config.center.discovered or self.bypass_discovery_center) then
        self.children.center:draw_shader("dvrprv_ticket_negative", nil, self.ARGS.send_to_shader)
        self.children.center:draw_shader("negative_shine", nil, self.ARGS.send_to_shader)

        if self.children.front then
            self.children.front:draw_shader("dvrprv_ticket_negative", nil, self.ARGS.send_to_shader)
        end
    elseif self.ability.name == "I Sing, I've No Shape" and self.config.center.discovered then
        self.children.center:draw_shader("dvrprv_ticket_polychrome", nil, self.ARGS.send_to_shader)
    else
        self.children.center:draw_shader("dvrprv_ticket", nil, self.ARGS.send_to_shader)
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''elseif card.ability.set == 'Enhanced' or card.ability.set == 'Default'*'''
position = "before"
payload = '''
::reverie_use_card_consumable_skip::'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if card.area then card.area:remove_card(card) end'''
position = "before"
payload = '''
local is_pack_card = card.area and card.area == G.pack_cards'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if card.ability.consumeable then'''
position = "after"
payload = '''
local is_cine = Reverie.is_cine_or_reverie(card)
if is_pack_card and (Reverie.is_in_reverie_pack() or is_cine) then
    (is_cine and G.cine_quests or G.consumeables):emplace(card)
    card:add_to_deck()
    play_sound('card1', 0.8, 0.6)
    play_sound('generic1')
    dont_dissolve = true
    delay_fac = 0.2

    goto reverie_use_card_consumable_skip
end'''
match_indent = true

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<indent>[ \t]*)(?<capture>bot_dynatext = DynaText\(\{string = localize\('k_redeemed_ex'\).*(\n.*?)*)(?<target>play_sound\('coin1'\))'''
position = "at"
line_prepend = "$indent"
payload = '''
$capture
if self.cost > 0 then
    $target
end
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif card.area == G.hand then'''
position = "before"
payload = '''
elseif card.area == G.cine_quests then
    y_off = 0.05 * card.T.h'''
match_indent = true

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''ease_background_colour_blind\(G.GAME.PACK_INTERRUPT\)\n.*\n.*\n.*\n(?<indent>[ \t]*)for i = 1, #G\.GAME\.tags do\n'''
position = "after"
line_prepend = "$indent"
payload = '''
if G.shop then
    break -- blocking newly gained new_blind_choice tags from triggering in shop
end

'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.ability_UIBox_table = self:generate_UIBox_ability_table()'''
position = "after"
payload = '''

if self.ability.morseled then
    Reverie.morselize_UI(self)
end
'''
match_indent = true

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''Card:add_to_deck\(from_debuff.*(\n.*?)*(?<indent>[\t ]*)G.jokers.config.card_limit = G.jokers.config.card_limit \+ 1'''
position = "after"
line_prepend = "$indent"
payload = '''

if Reverie.is_cine_or_reverie(self) then
    G.consumeables.config.card_limit = G.consumeables.config.card_limit - self.edition.card_limit
    G.cine_quests.config.card_limit = G.cine_quests.config.card_limit + self.edition.card_limit
end
'''

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''self.edition = \{\}\n.*if self.added_to_deck then.*\n(?<indent>[\t ]*)if self.ability.consumeable then(\n.*?)*end'''
position = "after"
line_prepend = "$indent"
payload = '''

if Reverie.is_cine_or_reverie(self) then
    G.consumeables.config.card_limit = G.consumeables.config.card_limit - 1
    G.cine_quests.config.card_limit = G.cine_quests.config.card_limit + 1
end
'''

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''Card:remove_from_deck\(from_debuff.*(\n.*?)*(?<indent>[\t ]*)G.jokers.config.card_limit = G.jokers.config.card_limit - 1'''
position = "after"
line_prepend = "$indent"
payload = '''

if Reverie.is_cine_or_reverie(self) then
    G.consumeables.config.card_limit = G.consumeables.config.card_limit + self.edition.card_limit
    G.cine_quests.config.card_limit = G.cine_quests.config.card_limit - self.edition.card_limit
end
'''

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''Card:remove\(\).*(\n.*?)*(?<indent>[\t ]*)G.jokers.config.card_limit = G.jokers.config.card_limit - 1'''
position = "after"
line_prepend = "$indent"
payload = '''

if Reverie.is_cine_or_reverie(self) then
    G.consumeables.config.card_limit = G.consumeables.config.card_limit + self.edition.card_limit
    G.cine_quests.config.card_limit = G.cine_quests.config.card_limit - self.edition.card_limit
end
'''

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''G\.FUNCS\.reroll_shop.*(\n.*?)*?(?<indent>[ \t]*)for i = 1, G\.GAME\.shop\.joker_max - #G\.shop_jokers\.cards do.*(\n.*?)*?.+create_card_for_shop'''
position = "after"
root_capture = "$indent"
line_prepend = "$indent"
payload = '''

if G.GAME.current_round.used_cine then
    for i = 1, G.GAME.shop.joker_max - #G.shop_jokers.cards do
        local new_shop_card = Reverie.create_card_for_cine_shop(G.shop_jokers)
        G.shop_jokers:emplace(new_shop_card)
        new_shop_card:juice_up()
    end

    return true
end

'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if v.name == 'Black Hole' or v.name == 'The Soul' then'''
position = "before"
payload = '''
if v.set == "Spectral" and v.name == "Reverie" then
    add = false
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.ref_table:use_consumeable(area)'''
position = "after"
payload = '''
e.config.ref_table.ability.not_destroyed = true
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.CONTROLLER:recall_cardarea_focus('jokers')'''
position = "after"
payload = '''
::reverie_buy_from_shop_tag_focus_skip::
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.CONTROLLER:save_cardarea_focus('jokers')'''
position = "before"
payload = '''
if c1.ability.set == "Tag" then
    G.CONTROLLER:save_cardarea_focus("shop_jokers")
    G.CONTROLLER:recall_cardarea_focus("shop_jokers")

    goto reverie_buy_from_shop_tag_focus_skip
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''pack_cards[i] = card'''
position = "after"
payload = '''

if self.config.center.key:find(Reverie.prefix) then
    if not Reverie.booster_excludes then
        Reverie.booster_excludes = {}
    end

    table.insert(Reverie.booster_excludes, card.config.center.key)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''desc_nodes.name = localize{type = 'name_text', key = name_override or _c.key, set = name_override and 'Other' or _c.set}*'''
position = "after"
payload = '''
if _c.generate_detailed_tooltip and type(_c.generate_detailed_tooltip) == "function" then
    _c:generate_detailed_tooltip(info_queue, card, desc_nodes)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''pinned_left = G.C.ORANGE,'''
position = "before"
payload = '''
morseled = HEX("b0aa9f"),'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''calculate_reroll_cost(final_free)'''
position = "after"
payload = '''
Reverie.calculate_reroll_cost()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if polled_rate > check_rate and polled_rate <= check_rate + v.val then'''
position = "before"
payload = '''
    if _ == 1 and G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_dvrprv_filmstrip" and G.GAME.selected_back.name == "Filmstrip Deck" then
        local rate = CardSleeves.Sleeve:get_obj(G.GAME.selected_sleeve).config.rate
        table.insert(rates, {
            type = "Cine_Quest",
            val = rate
        })
        total_rate = total_rate + rate
        polled_rate = pseudorandom(pseudoseed("cdt"..G.GAME.round_resets.ante)) * total_rate
    end
'''
match_indent = true